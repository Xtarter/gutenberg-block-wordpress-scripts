<?php
 class WP_SQLite_Translator { const SQLITE_BUSY = 5; const SQLITE_LOCKED = 6; const DATA_TYPES_CACHE_TABLE = '_mysql_data_types_cache'; const CREATE_DATA_TYPES_CACHE_TABLE = 'CREATE TABLE IF NOT EXISTS _mysql_data_types_cache (
		`table` TEXT NOT NULL,
		`column_or_index` TEXT NOT NULL,
		`mysql_type` TEXT NOT NULL,
		PRIMARY KEY(`table`, `column_or_index`)
	);'; private $pdo; public $client_info = ''; private $field_types_translation = array( 'bit' => 'integer', 'bool' => 'integer', 'boolean' => 'integer', 'tinyint' => 'integer', 'smallint' => 'integer', 'mediumint' => 'integer', 'int' => 'integer', 'integer' => 'integer', 'bigint' => 'integer', 'float' => 'real', 'double' => 'real', 'decimal' => 'real', 'dec' => 'real', 'numeric' => 'real', 'fixed' => 'real', 'date' => 'text', 'datetime' => 'text', 'timestamp' => 'text', 'time' => 'text', 'year' => 'text', 'char' => 'text', 'varchar' => 'text', 'binary' => 'integer', 'varbinary' => 'blob', 'tinyblob' => 'blob', 'tinytext' => 'text', 'blob' => 'blob', 'text' => 'text', 'mediumblob' => 'blob', 'mediumtext' => 'text', 'longblob' => 'blob', 'longtext' => 'text', 'geomcollection' => 'text', 'geometrycollection' => 'text', ); private $mysql_date_format_to_sqlite_strftime = array( '%a' => '%D', '%b' => '%M', '%c' => '%n', '%D' => '%jS', '%d' => '%d', '%e' => '%j', '%H' => '%H', '%h' => '%h', '%I' => '%h', '%i' => '%M', '%j' => '%z', '%k' => '%G', '%l' => '%g', '%M' => '%F', '%m' => '%m', '%p' => '%A', '%r' => '%h:%i:%s %A', '%S' => '%s', '%s' => '%s', '%T' => '%H:%i:%s', '%U' => '%W', '%u' => '%W', '%V' => '%W', '%v' => '%W', '%W' => '%l', '%w' => '%w', '%X' => '%Y', '%x' => '%o', '%Y' => '%Y', '%y' => '%y', ); private $last_select_found_rows; private $last_sql_calc_found_rows = null; private $rewriter; public $mysql_query; public $executed_sqlite_queries = array(); private $insert_columns = array(); private $results = null; public $is_error = false; private $errors; private $error_messages = array(); private $last_insert_id; private $affected_rows; private $column_data; private $num_rows; private $return_value; private $transaction_level = 0; private $last_exec_returned; private $pdo_fetch_mode; private $last_reserved_keyword; public function __construct( $pdo = null ) { if ( ! $pdo ) { if ( ! is_file( FQDB ) ) { $this->prepare_directory(); } $locked = false; $status = 0; $err_message = ''; do { try { $dsn = 'sqlite:' . FQDB; $pdo = new PDO( $dsn, null, null, array( PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION ) ); } catch ( PDOException $ex ) { $status = $ex->getCode(); if ( self::SQLITE_BUSY === $status || self::SQLITE_LOCKED === $status ) { $locked = true; } else { $err_message = $ex->getMessage(); } } } while ( $locked ); if ( $status > 0 ) { $message = sprintf( '<p>%s</p><p>%s</p><p>%s</p>', 'Database initialization error!', "Code: $status", "Error Message: $err_message" ); $this->is_error = true; $this->error_messages[] = $message; return; } } new WP_SQLite_PDO_User_Defined_Functions( $pdo ); $pdo->setAttribute( PDO::ATTR_STRINGIFY_FETCHES, true ); $pdo->query( WP_SQLite_Translator::CREATE_DATA_TYPES_CACHE_TABLE ); $this->pdo = $pdo; $this->client_info = SQLite3::version()['versionString']; register_shutdown_function( array( $this, '__destruct' ) ); $statement = $this->pdo->query( 'PRAGMA foreign_keys' ); if ( $statement->fetchColumn( 0 ) == '0' ) { $this->pdo->query( 'PRAGMA foreign_keys = ON' ); } $this->pdo->query( 'PRAGMA encoding="UTF-8";' ); } function __destruct() { if ( defined( 'SQLITE_MEM_DEBUG' ) && SQLITE_MEM_DEBUG ) { $max = ini_get( 'memory_limit' ); if ( is_null( $max ) ) { $message = sprintf( '[%s] Memory_limit is not set in php.ini file.', gmdate( 'Y-m-d H:i:s', $_SERVER['REQUEST_TIME'] ) ); error_log( $message ); return; } if ( stripos( $max, 'M' ) !== false ) { $max = (int) $max * MB_IN_BYTES; } $peak = memory_get_peak_usage( true ); $used = round( (int) $peak / (int) $max * 100, 2 ); if ( $used > 90 ) { $message = sprintf( "[%s] Memory peak usage warning: %s %% used. (max: %sM, now: %sM)\n", gmdate( 'Y-m-d H:i:s', $_SERVER['REQUEST_TIME'] ), $used, $max, $peak ); error_log( $message ); } } } public function get_pdo() { return $this->pdo; } public function get_insert_id() { return $this->last_insert_id; } public function get_affected_rows() { return $this->affected_rows; } private function prepare_directory() { global $wpdb; $u = umask( 0000 ); if ( ! is_dir( FQDBDIR ) ) { if ( ! @mkdir( FQDBDIR, 0704, true ) ) { umask( $u ); wp_die( 'Unable to create the required directory! Please check your server settings.', 'Error!' ); } } if ( ! is_writable( FQDBDIR ) ) { umask( $u ); $message = 'Unable to create a file in the directory! Please check your server settings.'; wp_die( $message, 'Error!' ); } if ( ! is_file( FQDBDIR . '.htaccess' ) ) { $fh = fopen( FQDBDIR . '.htaccess', 'w' ); if ( ! $fh ) { umask( $u ); echo 'Unable to create a file in the directory! Please check your server settings.'; return false; } fwrite( $fh, 'DENY FROM ALL' ); fclose( $fh ); } if ( ! is_file( FQDBDIR . 'index.php' ) ) { $fh = fopen( FQDBDIR . 'index.php', 'w' ); if ( ! $fh ) { umask( $u ); echo 'Unable to create a file in the directory! Please check your server settings.'; return false; } fwrite( $fh, '<?php // Silence is gold. ?>' ); fclose( $fh ); } umask( $u ); return true; } public function query( $statement, $mode = PDO::FETCH_OBJ, ...$fetch_mode_args ) { $this->flush(); $this->pdo_fetch_mode = $mode; $this->mysql_query = $statement; if ( preg_match( '/^\s*START TRANSACTION/i', $statement ) || preg_match( '/^\s*BEGIN/i', $statement ) ) { return $this->begin_transaction(); } if ( preg_match( '/^\s*COMMIT/i', $statement ) ) { return $this->commit(); } if ( preg_match( '/^\s*ROLLBACK/i', $statement ) ) { return $this->rollback(); } try { $this->begin_transaction(); do { $error = null; try { $this->execute_mysql_query( $statement ); } catch ( PDOException $error ) { if ( $error->getCode() !== self::SQLITE_BUSY ) { throw $error; } } } while ( $error ); $this->commit(); return $this->return_value; } catch ( Exception $err ) { $this->rollback(); if ( defined( 'PDO_DEBUG' ) && PDO_DEBUG === true ) { throw $err; } return $this->handle_error( $err ); } } public function get_columns() { if ( ! empty( $this->results ) ) { $primary_key = array( 'meta_id', 'comment_ID', 'link_ID', 'option_id', 'blog_id', 'option_name', 'ID', 'term_id', 'object_id', 'term_taxonomy_id', 'umeta_id', 'id', ); $unique_key = array( 'term_id', 'taxonomy', 'slug' ); $data = array( 'name' => '', 'table' => '', 'max_length' => 0, 'not_null' => 1, 'primary_key' => 0, 'unique_key' => 0, 'multiple_key' => 0, 'numeric' => 0, 'blob' => 0, 'type' => '', 'int' => 0, 'zerofill' => 0, ); $table_name = ''; $sql = ''; $query = end( $this->executed_sqlite_queries ); if ( $query ) { $sql = $query['sql']; } if ( preg_match( '/\s*FROM\s*(.*)?\s*/i', $sql, $match ) ) { $table_name = trim( $match[1] ); } foreach ( $this->results[0] as $key => $value ) { $data['name'] = $key; $data['table'] = $table_name; if ( in_array( $key, $primary_key, true ) ) { $data['primary_key'] = 1; } elseif ( in_array( $key, $unique_key, true ) ) { $data['unique_key'] = 1; } else { $data['multiple_key'] = 1; } $this->column_data[] = json_decode( json_encode( $data ) ); $data['name'] = ''; $data['table'] = ''; $data['primary_key'] = 0; $data['unique_key'] = 0; $data['multiple_key'] = 0; } return $this->column_data; } return null; } public function get_query_results() { return $this->results; } public function get_num_rows() { return $this->num_rows; } public function get_return_value() { return $this->return_value; } private function execute_mysql_query( $query ) { $tokens = ( new WP_SQLite_Lexer( $query ) )->tokens; $this->rewriter = new WP_SQLite_Query_Rewriter( $tokens ); $query_type = $this->rewriter->peek()->value; switch ( $query_type ) { case 'ALTER': $this->execute_alter(); break; case 'CREATE': $this->execute_create(); break; case 'SELECT': $this->execute_select(); break; case 'INSERT': case 'REPLACE': $this->execute_insert_or_replace(); break; case 'UPDATE': $this->execute_update(); break; case 'DELETE': $this->execute_delete(); break; case 'CALL': case 'SET': $this->results = 0; break; case 'TRUNCATE': $this->execute_truncate(); break; case 'BEGIN': case 'START TRANSACTION': $this->results = $this->begin_transaction(); break; case 'COMMIT': $this->results = $this->commit(); break; case 'ROLLBACK': $this->results = $this->rollback(); break; case 'DROP': $this->execute_drop(); break; case 'SHOW': $this->execute_show(); break; case 'DESCRIBE': $this->execute_describe(); break; default: throw new Exception( 'Unknown query type: ' . $query_type ); } } private function execute_create_table() { $table = $this->parse_create_table(); $definitions = array(); foreach ( $table->fields as $field ) { if ( $field->primary_key && count( $table->primary_key ) > 1 ) { $field->primary_key = false; } if ( $field->auto_increment && count( $table->primary_key ) > 1 ) { throw new Exception( 'Cannot combine AUTOINCREMENT and multiple primary keys in SQLite' ); } $definitions[] = $this->make_sqlite_field_definition( $field ); $this->update_data_type_cache( $table->name, $field->name, $field->mysql_data_type ); } if ( count( $table->primary_key ) > 1 ) { $definitions[] = 'PRIMARY KEY ("' . implode( '", "', $table->primary_key ) . '")'; } $create_query = ( $table->create_table . '"' . $table->name . '" (' . "\n" . implode( ",\n", $definitions ) . ')' ); $this->execute_sqlite_query( $create_query ); $this->results = $this->last_exec_returned; $this->return_value = $this->results; foreach ( $table->constraints as $constraint ) { $index_type = $this->mysql_index_type_to_sqlite_type( $constraint->value ); $unique = ''; if ( 'UNIQUE INDEX' === $index_type ) { $unique = 'UNIQUE '; } $index_name = "{$table->name}__{$constraint->name}"; $this->execute_sqlite_query( "CREATE $unique INDEX \"$index_name\" ON \"{$table->name}\" (\"" . implode( '", "', $constraint->columns ) . '")' ); $this->update_data_type_cache( $table->name, $index_name, $constraint->value ); } } private function parse_create_table() { $this->rewriter = clone $this->rewriter; $result = new stdClass(); $result->create_table = null; $result->name = null; $result->fields = array(); $result->constraints = array(); $result->primary_key = array(); while ( true ) { $token = $this->rewriter->consume(); if ( ! $token ) { break; } if ( WP_SQLite_Token::TYPE_KEYWORD !== $token->type ) { $result->name = $this->normalize_column_name( $token->value ); $this->rewriter->drop_last(); $result->create_table = $this->rewriter->get_updated_query(); break; } } $this->rewriter->skip( array( 'type' => WP_SQLite_Token::TYPE_OPERATOR, 'value' => '(', ) ); $declarations_depth = $this->rewriter->depth; do { $this->rewriter->replace_all( array() ); $second_token = $this->rewriter->peek_nth( 2 ); if ( $second_token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_DATA_TYPE ) ) { $result->fields[] = $this->parse_mysql_create_table_field(); } else { $result->constraints[] = $this->parse_mysql_create_table_constraint(); } } while ( $token && $this->rewriter->depth >= $declarations_depth && $this->rewriter->peek()->token !== ')' ); foreach ( $result->constraints as $k => $constraint ) { if ( 'PRIMARY' === $constraint->value ) { $result->primary_key = array_merge( $result->primary_key, $constraint->columns ); unset( $result->constraints[ $k ] ); } } foreach ( $result->fields as $k => $field ) { if ( $field->primary_key ) { $result->primary_key[] = $field->name; } elseif ( in_array( $field->name, $result->primary_key, true ) ) { $field->primary_key = true; } } $result->primary_key = array_unique( $result->primary_key ); return $result; } private function parse_mysql_create_table_field() { $result = new stdClass(); $result->name = ''; $result->sqlite_data_type = ''; $result->not_null = false; $result->default = null; $result->auto_increment = false; $result->primary_key = false; $field_name_token = $this->rewriter->skip(); $this->rewriter->add( new WP_SQLite_Token( "\n", WP_SQLite_Token::TYPE_WHITESPACE ) ); $result->name = $this->normalize_column_name( $field_name_token->value ); $definition_depth = $this->rewriter->depth; $skip_mysql_data_type_parts = $this->skip_mysql_data_type(); $result->sqlite_data_type = $skip_mysql_data_type_parts[0]; $result->mysql_data_type = $skip_mysql_data_type_parts[1]; while ( true ) { $token = $this->rewriter->skip(); if ( ! $token ) { break; } if ( $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED, array( 'NOT NULL' ) ) ) { $result->not_null = true; continue; } if ( $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED, array( 'PRIMARY KEY' ) ) ) { $result->primary_key = true; continue; } if ( $token->matches( WP_SQLite_Token::TYPE_KEYWORD, null, array( 'AUTO_INCREMENT' ) ) ) { $result->primary_key = true; $result->auto_increment = true; continue; } if ( $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_FUNCTION, array( 'DEFAULT' ) ) ) { $result->default = $this->rewriter->consume()->token; continue; } if ( $this->is_create_table_field_terminator( $token, $definition_depth ) ) { $this->rewriter->add( $token ); break; } } return $result; } private function make_sqlite_field_definition( $field ) { $definition = '"' . $field->name . '" ' . $field->sqlite_data_type; if ( $field->auto_increment ) { $definition .= ' PRIMARY KEY AUTOINCREMENT'; } elseif ( $field->primary_key ) { $definition .= ' PRIMARY KEY '; } if ( $field->not_null ) { $definition .= ' NOT NULL'; } if ( null !== $field->default ) { $definition .= ' DEFAULT ' . $field->default; } if ( 'text' === $field->sqlite_data_type ) { $definition .= ' COLLATE NOCASE'; } return $definition; } private function parse_mysql_create_table_constraint() { $result = new stdClass(); $result->name = ''; $result->value = ''; $result->columns = array(); $definition_depth = $this->rewriter->depth; $constraint = $this->rewriter->peek(); if ( ! $constraint->matches( WP_SQLite_Token::TYPE_KEYWORD ) ) { throw new Exception( 'Unexpected token in MySQL query: ' . $this->rewriter->peek()->value ); } $result->value = $this->normalize_mysql_index_type( $constraint->value ); if ( $result->value ) { $this->rewriter->skip(); if ( 'PRIMARY' !== $result->value ) { $result->name = $this->rewriter->skip()->value; } $constraint_depth = $this->rewriter->depth; $this->rewriter->skip(); do { $result->columns[] = $this->normalize_column_name( $this->rewriter->skip()->value ); $paren_maybe = $this->rewriter->peek(); if ( $paren_maybe && '(' === $paren_maybe->token ) { $this->rewriter->skip(); $this->rewriter->skip(); $this->rewriter->skip(); } $this->rewriter->skip(); } while ( $this->rewriter->depth > $constraint_depth ); } do { $token = $this->rewriter->skip(); } while ( ! $this->is_create_table_field_terminator( $token, $definition_depth ) ); return $result; } private function is_create_table_field_terminator( $token, $definition_depth, $current_depth = null ) { if ( null === $current_depth ) { $current_depth = $this->rewriter->depth; } return ( null === $token || ( $current_depth === $definition_depth && WP_SQLite_Token::TYPE_OPERATOR === $token->type && ',' === $token->value ) || $current_depth === $definition_depth - 1 || ( WP_SQLite_Token::TYPE_DELIMITER === $token->type && ';' === $token->value ) ); } private function execute_delete() { $this->rewriter->consume(); $params = array(); while ( true ) { $token = $this->rewriter->peek(); if ( ! $token ) { break; } $this->remember_last_reserved_keyword( $token ); if ( $this->extract_bound_parameter( $token, $params ) || $this->translate_expression( $token ) ) { continue; } $this->rewriter->consume(); } $this->rewriter->consume_all(); $updated_query = $this->rewriter->get_updated_query(); if ( str_contains( $updated_query, ' JOIN ' ) ) { $table_prefix = isset( $GLOBALS['table_prefix'] ) ? $GLOBALS['table_prefix'] : 'wp_'; $this->execute_sqlite_query( "DELETE FROM {$table_prefix}options WHERE option_id IN (SELECT MIN(option_id) FROM {$table_prefix}options GROUP BY option_name HAVING COUNT(*) > 1)" ); $this->set_result_from_affected_rows(); return; } $rewriter = new WP_SQLite_Query_Rewriter( $this->rewriter->output_tokens ); $comma = $rewriter->peek( array( 'type' => WP_SQLite_Token::TYPE_OPERATOR, 'value' => ',', ) ); $from = $rewriter->peek( array( 'type' => WP_SQLite_Token::TYPE_KEYWORD, 'value' => 'FROM', ) ); if ( ! $comma || ! $from || $comma->position >= $from->position ) { $this->execute_sqlite_query( $updated_query, $params ); $this->set_result_from_affected_rows(); return; } $table_name = $rewriter->skip()->value; $rewriter->add( new WP_SQLite_Token( 'SELECT', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED ) ); $from = $rewriter->peek( array( 'type' => WP_SQLite_Token::TYPE_KEYWORD, 'value' => 'FROM', ) ); $index = array_search( $from, $rewriter->input_tokens, true ); for ( $i = $index + 1; $i < $rewriter->max; $i++ ) { if ( ! $rewriter->input_tokens[ $i ]->is_semantically_void() ) { $table_name = $rewriter->input_tokens[ $i ]->value; break; } } if ( ! $table_name ) { throw new Exception( 'Could not find table name for dual delete query.' ); } $q = $this->execute_sqlite_query( 'SELECT l.name FROM pragma_table_info("' . $table_name . '") as l WHERE l.pk = 1;' ); $pk_name = $q->fetch()['name']; $alias_nb = 0; while ( true ) { $token = $rewriter->consume(); if ( WP_SQLite_Token::TYPE_KEYWORD === $token->type && 'FROM' === $token->value ) { break; } if ( ',' !== $token->value ) { $rewriter->add_many( array( new WP_SQLite_Token( '.', WP_SQLite_Token::TYPE_OPERATOR, WP_SQLite_Token::FLAG_OPERATOR_SQL ), new WP_SQLite_Token( $pk_name, WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_KEY ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( 'AS', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( 'id_' . $alias_nb, WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_KEY ), ) ); ++$alias_nb; } } $rewriter->consume_all(); $select = $rewriter->get_updated_query(); $stmt = $this->execute_sqlite_query( $select ); $stmt->execute( $params ); $rows = $stmt->fetchAll(); $ids_to_delete = array(); foreach ( $rows as $id ) { $ids_to_delete[] = $id['id_0']; $ids_to_delete[] = $id['id_1']; } $query = ( count( $ids_to_delete ) ? "DELETE FROM {$table_name} WHERE {$pk_name} IN (" . implode( ',', $ids_to_delete ) . ')' : "DELETE FROM {$table_name} WHERE 0=1" ); $this->execute_sqlite_query( $query ); $this->set_result_from_affected_rows( count( $ids_to_delete ) ); } private function execute_select() { $this->rewriter->consume(); $params = array(); $table_name = null; $has_sql_calc_found_rows = false; while ( true ) { $token = $this->rewriter->peek(); if ( ! $token ) { break; } $this->remember_last_reserved_keyword( $token ); if ( ! $table_name ) { $table_name = $this->peek_table_name( $token ); } if ( $this->skip_sql_calc_found_rows( $token ) ) { $has_sql_calc_found_rows = true; continue; } if ( $this->extract_bound_parameter( $token, $params ) || $this->translate_expression( $token ) ) { continue; } $this->rewriter->consume(); } $this->rewriter->consume_all(); $updated_query = $this->rewriter->get_updated_query(); if ( $table_name && str_starts_with( strtolower( $table_name ), 'information_schema' ) ) { if ( str_contains( $updated_query, 'bytes' ) ) { $tables = $this->execute_sqlite_query( "SELECT name as `table` FROM sqlite_master WHERE type='table' ORDER BY name" )->fetchAll(); $rows = '(CASE '; foreach ( $tables as $table ) { $table_name = $table['table']; $count = $this->execute_sqlite_query( "SELECT COUNT(*) as `count` FROM $table_name" )->fetch(); $rows .= " WHEN name = '$table_name' THEN {$count['count']} "; } $rows .= 'ELSE 0 END) '; $updated_query = "SELECT name as `table`, $rows as `rows`, 0 as `bytes` FROM sqlite_master WHERE type='table' ORDER BY name"; } else { $updated_query = "SELECT name, 'myisam' as `engine`, 0 as `data`, 0 as `index` FROM sqlite_master WHERE type='table' ORDER BY name"; } $params = array(); } elseif ( strpos( $updated_query, '@@SESSION.sql_mode' ) !== false || strpos( $updated_query, 'CONVERT( ' ) !== false ) { $updated_query = 'SELECT 1=0'; $params = array(); } elseif ( $has_sql_calc_found_rows ) { $query = $updated_query; $unlimited_query = preg_replace( '/\\bLIMIT\\s\d+(?:\s*,\s*\d+)?$/imsx', '', $query ); $stmt = $this->execute_sqlite_query( $unlimited_query ); $stmt->execute( $params ); $this->last_sql_calc_found_rows = count( $stmt->fetchAll() ); } if ( strpos( $updated_query, 'FOUND_ROWS(' ) !== false ) { $last_found_rows = ( $this->last_sql_calc_found_rows ? $this->last_sql_calc_found_rows : 0 ) . ''; $updated_query = "SELECT {$last_found_rows} AS `FOUND_ROWS()`"; } $stmt = $this->execute_sqlite_query( $updated_query, $params ); $this->set_results_from_fetched_data( $stmt->fetchAll( $this->pdo_fetch_mode ) ); } private function execute_truncate() { $this->rewriter->skip(); $this->rewriter->skip(); $this->rewriter->add( new WP_SQLite_Token( 'DELETE', WP_SQLite_Token::TYPE_KEYWORD ) ); $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); $this->rewriter->add( new WP_SQLite_Token( 'FROM', WP_SQLite_Token::TYPE_KEYWORD ) ); $this->rewriter->consume_all(); $this->execute_sqlite_query( $this->rewriter->get_updated_query() ); $this->results = true; $this->return_value = true; } private function execute_describe() { $this->rewriter->skip(); $table_name = $this->rewriter->consume()->value; $stmt = $this->execute_sqlite_query( "SELECT
				`name` as `Field`,
				(
					CASE `notnull`
					WHEN 0 THEN 'YES'
					WHEN 1 THEN 'NO'
					END
				) as `Null`,
				IFNULL(
					d.`mysql_type`,
					(
						CASE `type`
						WHEN 'INTEGER' THEN 'int'
						WHEN 'TEXT' THEN 'text'
						WHEN 'BLOB' THEN 'blob'
						WHEN 'REAL' THEN 'real'
						ELSE `type`
						END
					)
				) as `Type`,
				TRIM(`dflt_value`, \"'\") as `Default`,
				'' as Extra,
				(
					CASE `pk`
					WHEN 0 THEN ''
					ELSE 'PRI'
					END
				) as `Key`
				FROM pragma_table_info(\"$table_name\") p
				LEFT JOIN " . self::DATA_TYPES_CACHE_TABLE . " d
				ON d.`table` = \"$table_name\"
				AND d.`column_or_index` = p.`name`
				;
			" ); $this->set_results_from_fetched_data( $stmt->fetchAll( $this->pdo_fetch_mode ) ); if ( ! $this->results ) { throw new PDOException( 'Table not found' ); } } private function execute_update() { $this->rewriter->consume(); $params = array(); while ( true ) { $token = $this->rewriter->peek(); if ( ! $token ) { break; } $this->remember_last_reserved_keyword( $token ); if ( $this->extract_bound_parameter( $token, $params ) || $this->translate_expression( $token ) ) { continue; } $this->rewriter->consume(); } $this->rewriter->consume_all(); $updated_query = $this->rewriter->get_updated_query(); $this->execute_sqlite_query( $updated_query, $params ); $this->set_result_from_affected_rows(); } private function execute_insert_or_replace() { $params = array(); $is_in_duplicate_section = false; $table_name = null; $this->rewriter->consume(); if ( 'IGNORE' === $this->rewriter->peek()->value ) { $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); $this->rewriter->add( new WP_SQLite_Token( 'OR', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED ) ); $this->rewriter->consume(); } $this->insert_columns = array(); $this->rewriter->consume(); $table_name = $this->rewriter->consume()->value; $paren = $this->rewriter->peek( array( 'type' => WP_SQLite_Token::TYPE_OPERATOR, 'value' => '(', ) ); $values = $this->rewriter->peek( array( 'type' => WP_SQLite_Token::TYPE_KEYWORD, 'value' => 'VALUES', ) ); if ( $paren && $values && $paren->position <= $values->position ) { $this->rewriter->consume( array( 'type' => WP_SQLite_Token::TYPE_OPERATOR, 'value' => '(', ) ); while ( true ) { $token = $this->rewriter->consume(); if ( $token->matches( WP_SQLite_Token::TYPE_OPERATOR, null, array( ')' ) ) ) { break; } if ( ! $token->matches( WP_SQLite_Token::TYPE_OPERATOR ) ) { $this->insert_columns[] = $token->value; } } } while ( true ) { $token = $this->rewriter->peek(); if ( ! $token ) { break; } $this->remember_last_reserved_keyword( $token ); if ( ( $is_in_duplicate_section && $this->translate_values_function( $token ) ) || $this->extract_bound_parameter( $token, $params ) || $this->translate_expression( $token ) ) { continue; } if ( $token->matches( WP_SQLite_Token::TYPE_KEYWORD, null, array( 'DUPLICATE' ) ) ) { $is_in_duplicate_section = true; $this->translate_on_duplicate_key( $table_name ); continue; } $this->rewriter->consume(); } $this->rewriter->consume_all(); $updated_query = $this->rewriter->get_updated_query(); $this->execute_sqlite_query( $updated_query, $params ); $this->set_result_from_affected_rows(); $this->last_insert_id = $this->pdo->lastInsertId(); if ( is_numeric( $this->last_insert_id ) ) { $this->last_insert_id = (int) $this->last_insert_id; } } private function preprocess_string_literal( $value ) { if ( 1 === preg_match( '/^(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2})Z$/', $value, $matches ) ) { $value = $matches[1] . ' ' . $matches[2]; } if ( 1 === preg_match( '/^(\d{4}-\d{2}-\d{2}) (\d{2}:\d{2}:\d{2})$/', $value, $matches ) ) { if ( false === strtotime( $value ) ) { $value = '0000-00-00 00:00:00'; } } return $value; } private function translate_cast_as_binary( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_DATA_TYPE, array( 'BINARY' ) ) ) { return false; } $call_parent = $this->rewriter->last_call_stack_element(); if ( ! $call_parent || 'CAST' !== $call_parent['function'] ) { return false; } $this->rewriter->skip(); $this->rewriter->add( new WP_SQLite_Token( 'BLOB', $token->type, $token->flags ) ); return true; } private function translate_expression( $token ) { return ( $this->skip_from_dual( $token ) || $this->translate_concat_function( $token ) || $this->translate_concat_comma_to_pipes( $token ) || $this->translate_cast_as_binary( $token ) || $this->translate_date_add_sub( $token ) || $this->translate_date_format( $token ) || $this->translate_interval( $token ) || $this->translate_regexp_functions( $token ) ); } private function skip_from_dual( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED, array( 'FROM' ) ) ) { return false; } $from_table = $this->rewriter->peek_nth( 2 )->value; if ( 'DUAL' !== strtoupper( $from_table ) ) { return false; } $this->rewriter->skip(); $this->rewriter->skip(); return true; } private function peek_table_name( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED, array( 'FROM' ) ) ) { return false; } $table_name = $this->rewriter->peek_nth( 2 )->value; if ( 'dual' === strtolower( $table_name ) ) { return false; } return $table_name; } private function skip_sql_calc_found_rows( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_KEYWORD, null, array( 'SQL_CALC_FOUND_ROWS' ) ) ) { return false; } $this->rewriter->skip(); return true; } private function remember_last_reserved_keyword( $token ) { if ( $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED ) ) { $this->last_reserved_keyword = $token->value; } } private function extract_bound_parameter( $token, &$params ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_STRING, WP_SQLite_Token::FLAG_STRING_SINGLE_QUOTES ) || 'AS' === $this->last_reserved_keyword ) { return false; } $param_name = ':param' . count( $params ); $params[ $param_name ] = $this->preprocess_string_literal( $token->value ); $this->rewriter->skip(); $this->rewriter->add( new WP_SQLite_Token( $param_name, WP_SQLite_Token::TYPE_STRING, WP_SQLite_Token::FLAG_STRING_SINGLE_QUOTES ) ); $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); return true; } private function translate_concat_function( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_FUNCTION, array( 'CONCAT' ) ) ) { return false; } $this->rewriter->skip(); return true; } private function translate_concat_comma_to_pipes( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_OPERATOR, WP_SQLite_Token::FLAG_OPERATOR_SQL, array( ',' ) ) ) { return false; } $call_parent = $this->rewriter->last_call_stack_element(); if ( ! $call_parent || 'CONCAT' !== $call_parent['function'] ) { return false; } $this->rewriter->skip(); $this->rewriter->add( new WP_SQLite_Token( '||', WP_SQLite_Token::TYPE_OPERATOR ) ); return true; } private function translate_date_add_sub( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_FUNCTION, array( 'DATE_ADD', 'DATE_SUB' ) ) ) { return false; } $this->rewriter->skip(); $this->rewriter->add( new WP_SQLite_Token( 'DATETIME', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_FUNCTION ) ); return true; } private function translate_values_function( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_FUNCTION, array( 'VALUES' ) ) ) { return false; } $this->rewriter->skip(); $this->rewriter->add( new WP_SQLite_Token( 'excluded', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_KEY ) ); $this->rewriter->add( new WP_SQLite_Token( '.', WP_SQLite_Token::TYPE_OPERATOR ) ); $this->rewriter->skip(); $this->rewriter->consume( array( 'type' => WP_SQLite_Token::TYPE_OPERATOR, 'value' => ')', ) ); $this->rewriter->drop_last(); return true; } private function translate_date_format( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_FUNCTION, array( 'DATE_FORMAT' ) ) ) { return false; } $this->rewriter->skip(); $this->rewriter->skip(); $first_arg = $this->rewriter->skip_and_return_all( array( 'type' => WP_SQLite_Token::TYPE_OPERATOR, 'value' => ',', ) ); $comma = array_pop( $first_arg ); if ( ',' !== $comma->value ) { throw new Exception( 'Could not parse the DATE_FORMAT() call' ); } $format = $this->rewriter->skip()->value; $new_format = strtr( $format, $this->mysql_date_format_to_sqlite_strftime ); if ( ! $new_format ) { throw new Exception( "Could not translate a DATE_FORMAT() format to STRFTIME format ($format)" ); } $cast_to_float = '%H.%i' === $format; if ( $cast_to_float ) { $this->rewriter->add( new WP_SQLite_Token( 'CAST', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_FUNCTION ) ); $this->rewriter->add( new WP_SQLite_Token( '(', WP_SQLite_Token::TYPE_OPERATOR ) ); } $this->rewriter->add( new WP_SQLite_Token( 'STRFTIME', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_FUNCTION ) ); $this->rewriter->add( new WP_SQLite_Token( '(', WP_SQLite_Token::TYPE_OPERATOR ) ); $this->rewriter->add( new WP_SQLite_Token( "'$new_format'", WP_SQLite_Token::TYPE_STRING ) ); $this->rewriter->add( new WP_SQLite_Token( ',', WP_SQLite_Token::TYPE_OPERATOR ) ); $this->rewriter->add_many( $first_arg ); $this->rewriter->consume( array( 'type' => WP_SQLite_Token::TYPE_OPERATOR, 'value' => ')', ) ); if ( $cast_to_float ) { $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); $this->rewriter->add( new WP_SQLite_Token( 'as', WP_SQLite_Token::TYPE_OPERATOR ) ); $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); $this->rewriter->add( new WP_SQLite_Token( 'FLOAT', WP_SQLite_Token::TYPE_KEYWORD ) ); $this->rewriter->add( new WP_SQLite_Token( ')', WP_SQLite_Token::TYPE_OPERATOR ) ); } return true; } private function translate_interval( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_KEYWORD, null, array( 'INTERVAL' ) ) ) { return false; } $this->rewriter->skip(); $num = $this->rewriter->skip()->value; $unit = $this->rewriter->skip()->value; $interval_op = '+'; for ( $j = count( $this->rewriter->call_stack ) - 1; $j >= 0; $j-- ) { $call = $this->rewriter->call_stack[ $j ]; if ( 'DATE_ADD' === $call['function'] ) { $interval_op = '+'; break; } if ( 'DATE_SUB' === $call['function'] ) { $interval_op = '-'; break; } } $this->rewriter->add( new WP_SQLite_Token( "'{$interval_op}$num $unit'", WP_SQLite_Token::TYPE_STRING ) ); return true; } private function translate_regexp_functions( $token ) { if ( ! $token->matches( WP_SQLite_Token::TYPE_KEYWORD, null, array( 'REGEXP', 'RLIKE' ) ) ) { return false; } $this->rewriter->skip(); $this->rewriter->add( new WP_SQLite_Token( 'REGEXP', WP_SQLite_Token::TYPE_KEYWORD ) ); $next = $this->rewriter->peek(); if ( $next->matches( WP_SQLite_Token::TYPE_KEYWORD, null, array( 'BINARY' ) ) ) { $this->rewriter->skip(); $this->rewriter->add_many( array( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( 'char', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_FUNCTION ), new WP_SQLite_Token( '(', WP_SQLite_Token::TYPE_OPERATOR ), new WP_SQLite_Token( '0', WP_SQLite_Token::TYPE_NUMBER ), new WP_SQLite_Token( ')', WP_SQLite_Token::TYPE_OPERATOR ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( '||', WP_SQLite_Token::TYPE_OPERATOR ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), ) ); } return true; } private function translate_on_duplicate_key( $table_name ) { $pk_columns = array(); foreach ( $this->get_primary_keys( $table_name ) as $row ) { $pk_columns[] = $row['name']; } $unique_columns = array(); foreach ( $this->get_keys( $table_name, true ) as $row ) { foreach ( $row['columns'] as $column ) { $unique_columns[] = $column['name']; } } $conflict_columns = array_intersect( $this->insert_columns, array_merge( $pk_columns, $unique_columns ) ); if ( ! $conflict_columns && count( $pk_columns ) > 1 ) { $conflict_columns = $pk_columns; } if ( ! $conflict_columns && count( $unique_columns ) > 0 ) { $conflict_columns = array( $unique_columns[0] ); } if ( ! $conflict_columns ) { $conflict_columns = $pk_columns; } if ( ! $conflict_columns ) { $this->rewriter->drop_last(); $this->rewriter->skip(); $this->rewriter->skip(); $this->rewriter->skip(); while ( $this->rewriter->skip() ) { } return; } $this->rewriter->skip(); $this->rewriter->skip(); $this->rewriter->skip(); $this->rewriter->add( new WP_SQLite_Token( 'CONFLICT', WP_SQLite_Token::TYPE_KEYWORD ) ); $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); $this->rewriter->add( new WP_SQLite_Token( '(', WP_SQLite_Token::TYPE_OPERATOR ) ); $max = count( $conflict_columns ); foreach ( $conflict_columns as $i => $conflict_column ) { $this->rewriter->add( new WP_SQLite_Token( '"' . $conflict_column . '"', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_KEY ) ); if ( $i !== $max - 1 ) { $this->rewriter->add( new WP_SQLite_Token( ',', WP_SQLite_Token::TYPE_OPERATOR ) ); $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); } } $this->rewriter->add( new WP_SQLite_Token( ')', WP_SQLite_Token::TYPE_OPERATOR ) ); $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); $this->rewriter->add( new WP_SQLite_Token( 'DO', WP_SQLite_Token::TYPE_KEYWORD ) ); $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); $this->rewriter->add( new WP_SQLite_Token( 'UPDATE', WP_SQLite_Token::TYPE_KEYWORD ) ); $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); $this->rewriter->add( new WP_SQLite_Token( 'SET', WP_SQLite_Token::TYPE_KEYWORD ) ); $this->rewriter->add( new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ) ); } private function get_primary_keys( $table_name ) { $stmt = $this->execute_sqlite_query( 'SELECT * FROM pragma_table_info(:table_name) as l WHERE l.pk > 0;' ); $stmt->execute( array( 'table_name' => $table_name ) ); return $stmt->fetchAll(); } private function get_keys( $table_name, $only_unique = false ) { $query = $this->execute_sqlite_query( 'SELECT * FROM pragma_index_list("' . $table_name . '") as l;' ); $indices = $query->fetchAll(); $results = array(); foreach ( $indices as $index ) { if ( ! $only_unique || '1' === $index['unique'] ) { $query = $this->execute_sqlite_query( 'SELECT * FROM pragma_index_info("' . $index['name'] . '") as l;' ); $results[] = array( 'index' => $index, 'columns' => $query->fetchAll(), ); } } return $results; } private function get_sqlite_create_table( $table_name ) { $stmt = $this->execute_sqlite_query( 'SELECT sql FROM sqlite_master WHERE type="table" AND name=:table' ); $stmt->execute( array( ':table' => $table_name ) ); $create_table = ''; foreach ( $stmt->fetchAll() as $row ) { $create_table .= $row['sql'] . "\n"; } return $create_table; } private function execute_alter() { $this->rewriter->consume(); $subject = strtolower( $this->rewriter->consume()->token ); if ( 'table' !== $subject ) { throw new Exception( 'Unknown subject: ' . $subject ); } $table_name = $this->normalize_column_name( $this->rewriter->consume()->token ); do { $this->rewriter->replace_all( array( new WP_SQLite_Token( 'ALTER', WP_SQLite_Token::TYPE_KEYWORD ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( 'TABLE', WP_SQLite_Token::TYPE_KEYWORD ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( $table_name, WP_SQLite_Token::TYPE_KEYWORD ), ) ); $op_type = strtoupper( $this->rewriter->consume()->token ); $op_subject = strtoupper( $this->rewriter->consume()->token ); $mysql_index_type = $this->normalize_mysql_index_type( $op_subject ); $is_index_op = ! ! $mysql_index_type; if ( 'ADD' === $op_type && 'COLUMN' === $op_subject ) { $column_name = $this->rewriter->consume()->value; $skip_mysql_data_type_parts = $this->skip_mysql_data_type(); $sqlite_data_type = $skip_mysql_data_type_parts[0]; $mysql_data_type = $skip_mysql_data_type_parts[1]; $this->rewriter->add( new WP_SQLite_Token( $sqlite_data_type, WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_DATA_TYPE ) ); $this->update_data_type_cache( $table_name, $column_name, $mysql_data_type ); } elseif ( 'DROP' === $op_type && 'COLUMN' === $op_subject ) { $this->rewriter->consume_all(); } elseif ( 'CHANGE' === $op_type && 'COLUMN' === $op_subject ) { $from_name = $this->normalize_column_name( $this->rewriter->skip()->token ); $new_field = $this->parse_mysql_create_table_field(); $alter_terminator = end( $this->rewriter->output_tokens ); $this->update_data_type_cache( $table_name, $new_field->name, $new_field->mysql_data_type ); $old_schema = $this->get_sqlite_create_table( $table_name ); $old_indexes = $this->get_keys( $table_name, false ); $tokens = ( new WP_SQLite_Lexer( $old_schema ) )->tokens; $create_table = new WP_SQLite_Query_Rewriter( $tokens ); while ( true ) { $token = $create_table->consume(); if ( ! $token ) { break; } if ( WP_SQLite_Token::TYPE_STRING !== $token->type || $from_name !== $this->normalize_column_name( $token->value ) ) { continue; } $create_table->drop_last(); $is_column_definition = $create_table->peek()->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_DATA_TYPE ); if ( $is_column_definition ) { $field_depth = $create_table->depth; do { $field_terminator = $create_table->skip(); } while ( ! $this->is_create_table_field_terminator( $field_terminator, $field_depth, $create_table->depth ) ); $definition = $this->make_sqlite_field_definition( $new_field ); $create_table->add( new WP_SQLite_Token( $definition, WP_SQLite_Token::TYPE_KEYWORD ) ); $create_table->add( $field_terminator ); } else { $create_table->add( new WP_SQLite_Token( "`$new_field->name`", WP_SQLite_Token::TYPE_KEYWORD ) ); } } $cache_table_name = "_tmp__{$table_name}_" . rand( 10000000, 99999999 ); $this->execute_sqlite_query( "CREATE TABLE `$cache_table_name` as SELECT * FROM `$table_name`" ); $this->execute_sqlite_query( "DROP TABLE `$table_name`" ); $this->execute_sqlite_query( $create_table->get_updated_query() ); $this->execute_sqlite_query( "INSERT INTO {$table_name} SELECT * FROM $cache_table_name" ); $this->execute_sqlite_query( "DROP TABLE `$cache_table_name`" ); foreach ( $old_indexes as $row ) { if ( str_starts_with( $row['index']['name'], 'sqlite_autoindex_' ) ) { continue; } $columns = array(); foreach ( $row['columns'] as $column ) { $columns[] = ( $column['name'] === $from_name ) ? '`' . $new_field->name . '`' : '`' . $column['name'] . '`'; } $unique = '1' === $row['index']['unique'] ? 'UNIQUE' : ''; $this->execute_sqlite_query( "CREATE $unique INDEX IF NOT EXISTS `{$row['index']['name']}` ON $table_name (" . implode( ', ', $columns ) . ')' ); } if ( ',' === $alter_terminator->token ) { $comma = true; continue; } break; } elseif ( 'ADD' === $op_type && $is_index_op ) { $key_name = $this->rewriter->consume()->value; $sqlite_index_type = $this->mysql_index_type_to_sqlite_type( $mysql_index_type ); $sqlite_index_name = "{$table_name}__$key_name"; $this->rewriter->replace_all( array( new WP_SQLite_Token( 'CREATE', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( $sqlite_index_type, WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( "\"$sqlite_index_name\"", WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_KEY ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( 'ON', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( '"' . $table_name . '"', WP_SQLite_Token::TYPE_STRING, WP_SQLite_Token::FLAG_STRING_DOUBLE_QUOTES ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( '(', WP_SQLite_Token::TYPE_OPERATOR ), ) ); $this->update_data_type_cache( $table_name, $sqlite_index_name, $mysql_index_type ); $token = $this->rewriter->consume( array( WP_SQLite_Token::TYPE_OPERATOR, null, '(', ) ); $this->rewriter->drop_last(); while ( true ) { $token = $this->rewriter->consume(); if ( ! $token ) { break; } if ( ! $token->matches( WP_SQLite_Token::TYPE_OPERATOR ) ) { $token->token = '`' . $this->normalize_column_name( $token->token ) . '`'; $token->value = '`' . $this->normalize_column_name( $token->token ) . '`'; } $paren_maybe = $this->rewriter->peek(); if ( $paren_maybe && '(' === $paren_maybe->token ) { $this->rewriter->skip(); $this->rewriter->skip(); $this->rewriter->skip(); } if ( ')' === $token->value ) { break; } } } elseif ( 'DROP' === $op_type && $is_index_op ) { $key_name = $this->rewriter->consume()->value; $this->rewriter->replace_all( array( new WP_SQLite_Token( 'DROP', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( 'INDEX', WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_RESERVED ), new WP_SQLite_Token( ' ', WP_SQLite_Token::TYPE_WHITESPACE ), new WP_SQLite_Token( "\"{$table_name}__$key_name\"", WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_KEY ), ) ); } else { throw new Exception( 'Unknown operation: ' . $op_type ); } $comma = $this->rewriter->consume( array( 'type' => WP_SQLite_Token::TYPE_OPERATOR, 'value' => ',', ) ); $this->rewriter->drop_last(); $this->execute_sqlite_query( $this->rewriter->get_updated_query() ); } while ( $comma ); $this->results = 1; $this->return_value = $this->results; } private function execute_create() { $this->rewriter->consume(); $what = $this->rewriter->consume()->token; if ( 'TEMPORARY' === $what ) { $this->rewriter->drop_last(); $what = $this->rewriter->consume()->token; } switch ( $what ) { case 'TABLE': $this->execute_create_table(); break; case 'PROCEDURE': case 'DATABASE': $this->results = true; break; default: throw new Exception( 'Unknown create type: ' . $what ); } } private function execute_drop() { $this->rewriter->consume(); $what = $this->rewriter->consume()->token; if ( 'TEMPORARY' === $what ) { $this->rewriter->drop_last(); $what = $this->rewriter->consume()->token; } switch ( $what ) { case 'TABLE': $this->rewriter->consume_all(); $this->execute_sqlite_query( $this->rewriter->get_updated_query() ); $this->results = $this->last_exec_returned; break; case 'PROCEDURE': case 'DATABASE': $this->results = true; return; default: throw new Exception( 'Unknown drop type: ' . $what ); } } private function execute_show() { $this->rewriter->skip(); $what1 = $this->rewriter->consume()->token; $what2 = $this->rewriter->consume()->token; $what = $what1 . ' ' . $what2; switch ( $what ) { case 'CREATE PROCEDURE': $this->results = true; return; case 'FULL COLUMNS': $this->rewriter->consume(); case 'COLUMNS FROM': $table_name = $this->rewriter->consume()->token; $stmt = $this->execute_sqlite_query( "PRAGMA table_info(\"$table_name\");" ); $this->set_results_from_fetched_data( $stmt->fetchAll( $this->pdo_fetch_mode ) ); return; case 'INDEX FROM': $table_name = $this->rewriter->consume()->token; $results = array(); foreach ( $this->get_primary_keys( $table_name ) as $row ) { $results[] = array( 'Table' => $table_name, 'Non_unique' => '0', 'Key_name' => 'PRIMARY', 'Column_name' => $row['name'], ); } foreach ( $this->get_keys( $table_name ) as $row ) { foreach ( $row['columns'] as $k => $column ) { $results[] = array( 'Table' => $table_name, 'Non_unique' => '1' === $row['index']['unique'] ? '0' : '1', 'Key_name' => $row['index']['name'], 'Column_name' => $column['name'], ); } } for ( $i = 0;$i < count( $results );$i++ ) { $sqlite_key_name = $results[ $i ]['Key_name']; $mysql_key_name = $sqlite_key_name; if ( str_starts_with( $mysql_key_name, 'sqlite_autoindex_' ) ) { $mysql_key_name = substr( $mysql_key_name, strlen( 'sqlite_autoindex_' ) ); $mysql_key_name = preg_replace( '/_[0-9]+$/', '', $mysql_key_name ); } if ( str_starts_with( $mysql_key_name, "{$table_name}__" ) ) { $mysql_key_name = substr( $mysql_key_name, strlen( "{$table_name}__" ) ); } $mysql_type = $this->get_cached_mysql_data_type( $table_name, $sqlite_key_name ); if ( 'FULLTEXT' !== $mysql_type && 'SPATIAL' !== $mysql_type ) { $mysql_type = 'BTREE'; } $results[ $i ] = (object) array_merge( $results[ $i ], array( 'Seq_in_index' => 0, 'Key_name' => $mysql_key_name, 'Index_type' => $mysql_type, 'Collation' => 'A', 'Cardinality' => '0', 'Sub_part' => null, 'Packed' => null, 'Null' => '', 'Comment' => '', 'Index_comment' => '', ) ); } $this->set_results_from_fetched_data( $results ); return; case 'TABLES LIKE': $table_expression = $this->rewriter->skip(); $stmt = $this->execute_sqlite_query( "SELECT `name` as `Tables_in_db` FROM `sqlite_master` WHERE `type`='table' AND `name` LIKE :param;", array( ':param' => $table_expression->value, ) ); $this->set_results_from_fetched_data( $stmt->fetchAll( $this->pdo_fetch_mode ) ); return; default: switch ( $what1 ) { case 'TABLES': $stmt = $this->execute_sqlite_query( "SELECT name FROM sqlite_master WHERE type='table'" ); $this->set_results_from_fetched_data( $stmt->fetchAll( $this->pdo_fetch_mode ) ); return; case 'VARIABLE': case 'VARIABLES': $this->results = true; return; default: throw new Exception( 'Unknown show type: ' . $what ); } } } private function skip_mysql_data_type() { $type = $this->rewriter->skip(); if ( ! $type->matches( WP_SQLite_Token::TYPE_KEYWORD, WP_SQLite_Token::FLAG_KEYWORD_DATA_TYPE ) ) { throw new Exception( 'Data type expected in MySQL query, unknown token received: ' . $type->value ); } $mysql_data_type = strtolower( $type->value ); if ( ! isset( $this->field_types_translation[ $mysql_data_type ] ) ) { throw new Exception( 'MySQL field type cannot be translated to SQLite: ' . $mysql_data_type ); } $sqlite_data_type = $this->field_types_translation[ $mysql_data_type ]; $paren_maybe = $this->rewriter->peek(); if ( $paren_maybe && '(' === $paren_maybe->token ) { $mysql_data_type .= $this->rewriter->skip()->token; $mysql_data_type .= $this->rewriter->skip()->token; $mysql_data_type .= $this->rewriter->skip()->token; } $int_maybe = $this->rewriter->peek(); if ( $int_maybe && $int_maybe->matches( WP_SQLite_Token::TYPE_KEYWORD, null, array( 'UNSIGNED' ) ) ) { $mysql_data_type .= ' ' . $this->rewriter->skip()->token; } return array( $sqlite_data_type, $mysql_data_type, ); } private function update_data_type_cache( $table, $column_or_index, $mysql_data_type ) { $this->execute_sqlite_query( 'INSERT INTO ' . self::DATA_TYPES_CACHE_TABLE . ' (`table`, `column_or_index`, `mysql_type`)
				VALUES (:table, :column, :datatype)
				ON CONFLICT(`table`, `column_or_index`) DO UPDATE SET `mysql_type` = :datatype
			', array( ':table' => $table, ':column' => $column_or_index, ':datatype' => $mysql_data_type, ) ); } private function get_cached_mysql_data_type( $table, $column_or_index ) { $stmt = $this->execute_sqlite_query( 'SELECT d.`mysql_type` FROM ' . self::DATA_TYPES_CACHE_TABLE . ' d
			WHERE `table`=:table
			AND `column_or_index` = :index', array( ':table' => $table, ':index' => $column_or_index, ) ); $mysql_type = $stmt->fetchColumn( 0 ); if ( str_ends_with( $mysql_type, ' KEY' ) ) { $mysql_type = substr( $mysql_type, 0, strlen( $mysql_type ) - strlen( ' KEY' ) ); } return $mysql_type; } private function normalize_column_name( $column_name ) { return trim( $column_name, '`\'"' ); } private function normalize_mysql_index_type( $index_type ) { $index_type = strtoupper( $index_type ); $index_type = preg_replace( '/INDEX$/', 'KEY', $index_type ); $index_type = preg_replace( '/ KEY$/', '', $index_type ); if ( 'KEY' === $index_type || 'PRIMARY' === $index_type || 'UNIQUE' === $index_type || 'FULLTEXT' === $index_type || 'SPATIAL' === $index_type ) { return $index_type; } return null; } private function mysql_index_type_to_sqlite_type( $normalized_mysql_index_type ) { if ( null === $normalized_mysql_index_type ) { return null; } if ( 'PRIMARY' === $normalized_mysql_index_type ) { return 'PRIMARY KEY'; } if ( 'UNIQUE' === $normalized_mysql_index_type ) { return 'UNIQUE INDEX'; } return 'INDEX'; } private function handle_error( Exception $err ) { $message = $err->getMessage(); $err_message = sprintf( 'Problem preparing the PDO SQL Statement. Error was: %s. trace: %s', $message, $err->getTraceAsString() ); $this->set_error( __LINE__, __FUNCTION__, $err_message ); $this->return_value = false; return false; } private function set_error( $line, $function, $message ) { $this->errors[] = array( 'line' => $line, 'function' => $function, ); $this->error_messages[] = $message; $this->is_error = true; } public function close() { $this->pdo = null; } public function get_error_message() { if ( count( $this->error_messages ) === 0 ) { $this->is_error = false; $this->error_messages = array(); return ''; } if ( false === $this->is_error ) { return ''; } $output = '<div style="clear:both">&nbsp;</div>' . PHP_EOL; $output .= '<div class="queries" style="clear:both;margin_bottom:2px;border:red dotted thin;">' . PHP_EOL; $output .= '<p>MySQL query:</p>' . PHP_EOL; $output .= '<p>' . $this->mysql_query . '</p>' . PHP_EOL; $output .= '<p>Queries made or created this session were:</p>' . PHP_EOL; $output .= '<ol>' . PHP_EOL; foreach ( $this->executed_sqlite_queries as $q ) { $message = "Executing: {$q['sql']} | " . ( $q['params'] ? 'parameters: ' . implode( ', ', $q['params'] ) : '(no parameters)' ); $output .= '<li>' . htmlspecialchars( $message ) . '</li>' . PHP_EOL; } $output .= '</ol>' . PHP_EOL; $output .= '</div>' . PHP_EOL; foreach ( $this->error_messages as $num => $m ) { $output .= '<div style="clear:both;margin_bottom:2px;border:red dotted thin;" class="error_message" style="border-bottom:dotted blue thin;">' . PHP_EOL; $output .= sprintf( 'Error occurred at line %1$d in Function %2$s. Error message was: %3$s.', (int) $this->errors[ $num ]['line'], '<code>' . htmlspecialchars( $this->errors[ $num ]['function'] ) . '</code>', $m ) . PHP_EOL; $output .= '</div>' . PHP_EOL; } try { throw new Exception(); } catch ( Exception $e ) { $output .= '<p>Backtrace:</p>' . PHP_EOL; $output .= '<pre>' . htmlspecialchars( $e->getTraceAsString() ) . '</pre>' . PHP_EOL; } return $output; } private function execute_sqlite_query( $sql, $params = array() ) { $this->executed_sqlite_queries[] = array( 'sql' => $sql, 'params' => $params, ); $stmt = $this->pdo->prepare( $sql ); $this->last_exec_returned = $stmt->execute( $params ); return $stmt; } private function set_results_from_fetched_data( $data ) { if ( null === $this->results ) { $this->results = $data; } if ( is_array( $this->results ) ) { $this->num_rows = count( $this->results ); $this->last_select_found_rows = count( $this->results ); } $this->return_value = $this->results; } private function set_result_from_affected_rows( $override = null ) { if ( null === $override ) { $this->affected_rows = (int) $this->execute_sqlite_query( 'select changes()' )->fetch()[0]; } else { $this->affected_rows = $override; } $this->return_value = $this->affected_rows; $this->num_rows = $this->affected_rows; $this->results = $this->affected_rows; } private function flush() { $this->mysql_query = ''; $this->results = null; $this->last_exec_returned = null; $this->last_insert_id = null; $this->affected_rows = null; $this->column_data = array(); $this->num_rows = null; $this->return_value = null; $this->error_messages = array(); $this->is_error = false; $this->executed_sqlite_queries = array(); $this->last_exec_returned = null; } public function begin_transaction() { $success = false; try { if ( 0 === $this->transaction_level ) { $this->execute_sqlite_query( 'BEGIN' ); } else { $this->execute_sqlite_query( 'SAVEPOINT LEVEL' . $this->transaction_level ); } $success = $this->last_exec_returned; } finally { if ( $success ) { ++$this->transaction_level; } } return $success; } public function commit() { if ( 0 === $this->transaction_level ) { return false; } --$this->transaction_level; if ( 0 === $this->transaction_level ) { $this->execute_sqlite_query( 'COMMIT' ); } else { $this->execute_sqlite_query( 'RELEASE SAVEPOINT LEVEL' . $this->transaction_level ); } return $this->last_exec_returned; } public function rollback() { if ( 0 === $this->transaction_level ) { return false; } --$this->transaction_level; if ( 0 === $this->transaction_level ) { $this->execute_sqlite_query( 'ROLLBACK' ); } else { $this->execute_sqlite_query( 'ROLLBACK TO SAVEPOINT LEVEL' . $this->transaction_level ); } return $this->last_exec_returned; } } 