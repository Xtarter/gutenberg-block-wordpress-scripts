<?php
 class WP_SQLite_DB extends wpdb { protected $dbh; public function __construct() { parent::__construct( '', '', '', '' ); $this->charset = 'utf8mb4'; } public function set_charset( $dbh, $charset = null, $collate = null ) { } public function get_col_charset( $table, $column ) { return 'utf8mb4'; } public function set_sql_mode( $modes = array() ) { } public function close() { return true; } public function select( $db, $dbh = null ) { $this->ready = true; } function _real_escape( $str ) { return addslashes( $str ); } public function esc_like( $text ) { return $text; } public function print_error( $str = '' ) { global $EZSQL_ERROR; if ( ! $str ) { $err = $this->dbh->get_error_message() ? $this->dbh->get_error_message() : ''; $str = empty( $err ) ? '' : $err[2]; } $EZSQL_ERROR[] = array( 'query' => $this->last_query, 'error_str' => $str, ); if ( $this->suppress_errors ) { return false; } wp_load_translations_early(); $caller = $this->get_caller(); $caller = $caller ? $caller : '(unknown)'; $error_str = sprintf( 'WordPress database error %1$s for query %2$s made by %3$s', $str, $this->last_query, $caller ); error_log( $error_str ); if ( ! $this->show_errors ) { return false; } if ( is_multisite() ) { $msg = "WordPress database error: [$str]\n{$this->last_query}\n"; if ( defined( 'ERRORLOGFILE' ) ) { error_log( $msg, 3, ERRORLOGFILE ); } if ( defined( 'DIEONDBERROR' ) ) { wp_die( $msg ); } } else { $str = htmlspecialchars( $str, ENT_QUOTES ); $query = htmlspecialchars( $this->last_query, ENT_QUOTES ); printf( '<div id="error"><p class="wpdberror">WordPress database error: [%1$s] %2$s</p></div>', $str, '<code>' . $query . '</code>' ); } } public function flush() { $this->last_result = array(); $this->col_info = null; $this->last_query = null; $this->rows_affected = 0; $this->num_rows = 0; $this->last_error = ''; $this->result = null; } public function db_connect( $allow_bail = true ) { if ( $this->dbh ) { return; } $this->init_charset(); $pdo = null; if ( isset( $GLOBALS['@pdo'] ) ) { $pdo = $GLOBALS['@pdo']; } $this->dbh = new WP_SQLite_Translator( $pdo ); $this->last_error = $this->dbh->get_error_message(); if ( $this->last_error ) { return false; } $GLOBALS['@pdo'] = $this->dbh->get_pdo(); $this->ready = true; } public function check_connection( $allow_bail = true ) { return true; } public function query( $query ) { if ( ! $this->ready ) { return false; } $query = apply_filters( 'query', $query ); $this->flush(); $this->func_call = "\$db->query(\"$query\")"; $this->last_query = $query; if ( defined( 'SAVEQUERIES' ) && SAVEQUERIES ) { $this->timer_start(); } $this->result = $this->dbh->query( $query ); $this->num_queries++; if ( defined( 'SAVEQUERIES' ) && SAVEQUERIES ) { $this->queries[] = array( $query, $this->timer_stop(), $this->get_caller() ); } $this->last_error = $this->dbh->get_error_message(); if ( $this->last_error ) { $this->print_error( $this->last_error ); return false; } if ( preg_match( '/^\\s*(set|create|alter|truncate|drop|optimize)\\s*/i', $query ) ) { return $this->dbh->get_return_value(); } if ( preg_match( '/^\\s*(insert|delete|update|replace)\s/i', $query ) ) { $this->rows_affected = $this->dbh->get_affected_rows(); if ( preg_match( '/^\s*(insert|replace)\s/i', $query ) ) { $this->insert_id = $this->dbh->get_insert_id(); } return $this->rows_affected; } $this->last_result = $this->dbh->get_query_results(); $this->num_rows = $this->dbh->get_num_rows(); return $this->num_rows; } protected function load_col_info() { if ( $this->col_info ) { return; } $this->col_info = $this->dbh->get_columns(); } public function has_cap( $db_cap ) { return 'subqueries' === strtolower( $db_cap ); } public function db_version() { return '5.5'; } public function db_server_info() { return SQLite3::version()['versionString']; } } 