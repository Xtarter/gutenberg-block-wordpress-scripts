<?php
 class WP_SQLite_PDO_User_Defined_Functions { public function __construct( $pdo ) { if ( ! $pdo ) { wp_die( 'Database is not initialized.', 'Database Error' ); } foreach ( $this->functions as $f => $t ) { $pdo->sqliteCreateFunction( $f, array( $this, $t ) ); } } private $functions = array( 'month' => 'month', 'monthnum' => 'month', 'year' => 'year', 'day' => 'day', 'hour' => 'hour', 'minute' => 'minute', 'second' => 'second', 'week' => 'week', 'weekday' => 'weekday', 'dayofweek' => 'dayofweek', 'dayofmonth' => 'dayofmonth', 'unix_timestamp' => 'unix_timestamp', 'now' => 'now', 'char_length' => 'char_length', 'md5' => 'md5', 'curdate' => 'curdate', 'rand' => 'rand', 'from_unixtime' => 'from_unixtime', 'localtime' => 'now', 'localtimestamp' => 'now', 'isnull' => 'isnull', 'if' => '_if', 'regexp' => 'regexp', 'field' => 'field', 'log' => 'log', 'least' => 'least', 'greatest' => 'greatest', 'get_lock' => 'get_lock', 'release_lock' => 'release_lock', 'ucase' => 'ucase', 'lcase' => 'lcase', 'inet_ntoa' => 'inet_ntoa', 'inet_aton' => 'inet_aton', 'datediff' => 'datediff', 'locate' => 'locate', 'utc_date' => 'utc_date', 'utc_time' => 'utc_time', 'utc_timestamp' => 'utc_timestamp', 'version' => 'version', ); public function unix_timestamp( $field = null ) { return is_null( $field ) ? time() : strtotime( $field ); } public function from_unixtime( $field, $format = null ) { $date = gmdate( 'Y-m-d H:i:s', $field ); return is_null( $format ) ? $date : $this->dateformat( $date, $format ); } public function now() { return gmdate( 'Y-m-d H:i:s' ); } public function curdate() { return gmdate( 'Y-m-d' ); } public function char_length( $field ) { return strlen( $field ); } public function md5( $field ) { return md5( $field ); } public function rand() { return mt_rand( 0, 1 ); } public function dateformat( $date, $format ) { $mysql_php_date_formats = array( '%a' => 'D', '%b' => 'M', '%c' => 'n', '%D' => 'jS', '%d' => 'd', '%e' => 'j', '%H' => 'H', '%h' => 'h', '%I' => 'h', '%i' => 'i', '%j' => 'z', '%k' => 'G', '%l' => 'g', '%M' => 'F', '%m' => 'm', '%p' => 'A', '%r' => 'h:i:s A', '%S' => 's', '%s' => 's', '%T' => 'H:i:s', '%U' => 'W', '%u' => 'W', '%V' => 'W', '%v' => 'W', '%W' => 'l', '%w' => 'w', '%X' => 'Y', '%x' => 'o', '%Y' => 'Y', '%y' => 'y', ); $time = strtotime( $date ); $format = strtr( $format, $mysql_php_date_formats ); return gmdate( $format, $time ); } public function month( $field ) { return intval( gmdate( 'n', strtotime( $field ) ) ); } public function year( $field ) { return intval( gmdate( 'Y', strtotime( $field ) ) ); } public function day( $field ) { return intval( gmdate( 'j', strtotime( $field ) ) ); } public function second( $field ) { return intval( gmdate( 's', strtotime( $field ) ) ); } public function minute( $field ) { return intval( gmdate( 'i', strtotime( $field ) ) ); } public function hour( $time ) { return intval( gmdate( 'H', strtotime( $time ) ) ); } public function week( $field, $mode ) { return intval( gmdate( 'W', strtotime( $field ) ) ); } public function weekday( $field ) { return intval( gmdate( 'N', strtotime( $field ) ) ) - 1; } public function dayofmonth( $field ) { return intval( gmdate( 'j', strtotime( $field ) ) ); } public function dayofweek( $field ) { return intval( gmdate( 'w', strtotime( $field ) ) ) + 1; } public function date( $date ) { return gmdate( 'Y-m-d', strtotime( $date ) ); } public function isnull( $field ) { return is_null( $field ); } public function _if( $expression, $true, $false ) { return ( true === $expression ) ? $true : $false; } public function regexp( $pattern, $field ) { if ( "\x00" === $pattern[0] ) { $pattern = substr( $pattern, 1 ); $flags = ''; } else { $flags = 'i'; } $pattern = str_replace( '/', '\/', $pattern ); $pattern = '/' . $pattern . '/' . $flags; return preg_match( $pattern, $field ); } public function field() { $num_args = func_num_args(); if ( $num_args < 2 || is_null( func_get_arg( 0 ) ) ) { return 0; } $arg_list = func_get_args(); $search_string = strtolower( array_shift( $arg_list ) ); for ( $i = 0; $i < $num_args - 1; $i++ ) { if ( strtolower( $arg_list[ $i ] ) === $search_string ) { return $i + 1; } } return 0; } public function log() { $num_args = func_num_args(); if ( 1 === $num_args ) { $arg1 = func_get_arg( 0 ); return log( $arg1 ); } if ( 2 === $num_args ) { $arg1 = func_get_arg( 0 ); $arg2 = func_get_arg( 1 ); return log( $arg1 ) / log( $arg2 ); } return null; } public function least() { $arg_list = func_get_args(); return "min($arg_list)"; } public function greatest() { $arg_list = func_get_args(); return "max($arg_list)"; } public function get_lock( $name, $timeout ) { return '1=1'; } public function release_lock( $name ) { return '1=1'; } public function ucase( $content ) { return "upper($content)"; } public function lcase( $content ) { return "lower($content)"; } public function inet_ntoa( $num ) { return long2ip( $num ); } public function inet_aton( $addr ) { return absint( ip2long( $addr ) ); } public function datediff( $start, $end ) { $start_date = new DateTime( $start ); $end_date = new DateTime( $end ); $interval = $end_date->diff( $start_date, false ); return $interval->format( '%r%a' ); } public function locate( $substr, $str, $pos = 0 ) { if ( ! extension_loaded( 'mbstring' ) ) { $val = strpos( $str, $substr, $pos ); if ( false !== $val ) { return $val + 1; } return 0; } $val = mb_strpos( $str, $substr, $pos ); if ( false !== $val ) { return $val + 1; } return 0; } public function utc_date() { return gmdate( 'Y-m-d', time() ); } public function utc_time() { return gmdate( 'H:i:s', time() ); } public function utc_timestamp() { return gmdate( 'Y-m-d H:i:s', time() ); } public function version() { return '5.5'; } } 