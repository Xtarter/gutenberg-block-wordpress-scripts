<?php
 class WP_SQLite_Query_Rewriter { public $input_tokens = array(); public $output_tokens = array(); public $index = -1; public $max = -1; public $call_stack = array(); public $depth = 0; private $token; private $last_function_call; public function __construct( $input_tokens ) { $this->input_tokens = $input_tokens; $this->max = count( $input_tokens ); } public function get_updated_query() { $query = ''; foreach ( $this->output_tokens as $token ) { $query .= $token->token; } return $query; } public function add( $token ) { if ( $token ) { $this->output_tokens[] = $token; } } public function add_many( $tokens ) { $this->output_tokens = array_merge( $this->output_tokens, $tokens ); } public function replace_all( $tokens ) { $this->output_tokens = $tokens; } public function peek( $query = array() ) { $type = isset( $query['type'] ) ? $query['type'] : null; $flags = isset( $query['flags'] ) ? $query['flags'] : null; $values = isset( $query['value'] ) ? ( is_array( $query['value'] ) ? $query['value'] : array( $query['value'] ) ) : null; $i = $this->index; while ( ++$i < $this->max ) { if ( $this->input_tokens[ $i ]->matches( $type, $flags, $values ) ) { return $this->input_tokens[ $i ]; } } } public function peek_nth( $nth ) { $found = 0; for ( $i = $this->index + 1;$i < $this->max;$i++ ) { $token = $this->input_tokens[ $i ]; if ( ! $token->is_semantically_void() ) { ++$found; } if ( $found === $nth ) { return $this->input_tokens[ $i ]; } } } public function consume_all( $query = array() ) { while ( $this->consume( $query ) ) { } } public function consume( $query = array() ) { $tokens = $this->move_forward( $query ); $this->output_tokens = array_merge( $this->output_tokens, $tokens ); return $this->token; } public function drop_last() { return array_pop( $this->output_tokens ); } public function skip( $query = array() ) { $this->skip_and_return_all( $query ); return $this->token; } public function skip_and_return_all( $query = array() ) { $tokens = $this->move_forward( $query ); foreach ( $tokens as $token ) { if ( $token->matches( WP_SQLite_Token::TYPE_WHITESPACE ) ) { $this->add( $token ); break; } } return $tokens; } private function move_forward( $query = array() ) { $type = isset( $query['type'] ) ? $query['type'] : null; $flags = isset( $query['flags'] ) ? $query['flags'] : null; $values = isset( $query['value'] ) ? ( is_array( $query['value'] ) ? $query['value'] : array( $query['value'] ) ) : null; $depth = isset( $query['depth'] ) ? $query['depth'] : null; $buffered = array(); while ( true ) { if ( ++$this->index >= $this->max ) { $this->token = null; $this->call_stack = array(); break; } $this->token = $this->input_tokens[ $this->index ]; $this->update_call_stack(); $buffered[] = $this->token; if ( ( null === $depth || $this->depth === $depth ) && $this->token->matches( $type, $flags, $values ) ) { break; } } return $buffered; } public function last_call_stack_element() { return count( $this->call_stack ) ? $this->call_stack[ count( $this->call_stack ) - 1 ] : null; } private function update_call_stack() { if ( $this->token->flags & WP_SQLite_Token::FLAG_KEYWORD_FUNCTION ) { $this->last_function_call = $this->token->value; } if ( WP_SQLite_Token::TYPE_OPERATOR === $this->token->type ) { switch ( $this->token->value ) { case '(': if ( $this->last_function_call ) { array_push( $this->call_stack, array( 'function' => $this->last_function_call, 'depth' => $this->depth, ) ); $this->last_function_call = null; } ++$this->depth; break; case ')': --$this->depth; $call_parent = $this->last_call_stack_element(); if ( $call_parent && $call_parent['depth'] === $this->depth ) { array_pop( $this->call_stack ); } break; } } } } 